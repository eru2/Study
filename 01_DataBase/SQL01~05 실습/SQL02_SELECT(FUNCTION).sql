-- 1
SELECT STUDENT_NO AS "학번", STUDENT_NAME AS "이름", 
    CASE
    WHEN SUBSTR(ENTRANCE_DATE, 1, 2) BETWEEN '00' AND '26'
    THEN TO_CHAR(TO_DATE('20' || ENTRANCE_DATE, 'YY/MM/DD'), 'YYYY-MM-DD')
    ELSE TO_CHAR(TO_DATE('19' || ENTRANCE_DATE, 'YY/MM/DD'), 'YYYY-MM-DD')
    END AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = 002
ORDER BY ENTRANCE_DATE ASC;

SELECT STUDENT_NO 학번, STUDENT_NAME 이름, 
       TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') 입학년도
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY 입학년도;


-- 2 
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE PROFESSOR_NAME NOT LIKE '___';

--WHERE LENGTH(PROFESSOR_NAME) != 3;
-- LENGTH()를 이용하여 PROFEOOSR_NAME의 문자열의 길이를 구해서 3글자가 아닌 사람들을 선택

-- 3
SELECT PROFESSOR_NAME AS "교수 이름",FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(19||SUBSTR(PROFESSOR_SSN, 1, 6), 'YYMMDD'))/ 12) AS "나이"
--SELECT PROFESSOR_NAME 교수이름, EXTRACT(YEAR FROM SYSDATE) - (19 || SUBSTR(PROFESSOR_SSN, 1, 2)) 나이
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1) = 1
ORDER BY 나이;

-- 4
SELECT SUBSTR(PROFESSOR_NAME, 2) AS "이름"
FROM TB_PROFESSOR;

-- 5
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
JOIN (SELECT STUDENT_NO,
                      CASE
                       WHEN SUBSTR(ENTRANCE_DATE, 1, 2) BETWEEN '00' AND '49' THEN
                       TRUNC(MONTHS_BETWEEN(TO_DATE('20' || ENTRANCE_DATE, 'YYYY/MM/DD'), TO_DATE('19' || SUBSTR(STUDENT_SSN, 1, 6), 'YYYYMMDD')) / 12)
                      ELSE 
                      TRUNC(MONTHS_BETWEEN(TO_DATE('19' || ENTRANCE_DATE, 'YYYY/MM/DD'), TO_DATE('19' || SUBSTR(STUDENT_SSN, 1, 6), 'YYYYMMDD')) / 12)
                      END AS "AGE"
                     FROM TB_STUDENT) USING (STUDENT_NO)
WHERE AGE <20;             

SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(STUDENT_SSN, 1, 6))) > 19;


-- 6
SELECT TO_CHAR(TO_DATE('2020-12-25', 'YYYY-MM-DD'), 'DAY') AS "2020년 크리스마스"
--SELECT TO_CHAR(TO_DATE('20201225'), 'DAY')
FROM DUAL;

-- 7
--TO_DATE('99/10/11', 'YY/MM/DD'), TO_DATE('49/10/11', 'YY/MM/DD')
--은 각각 2099년 10월 11일하고 2049년 10월 11일을 나타냅니다
--TO_DATE('99/10/11', 'RR/MM/DD'), TO_DATE('49/10/11', 'RR/MM/DD')
--은 각각 1999년 10월 11일하고 2049년 10월 11일을 나타냅니다.

-- 8
--2000년도 이후 입학자들은 학번이 A로 시작하게 되었다는 정보를 통한 학번에 A가 없는 학생들 조회
SELECT SUBSTR(STUDENT_NO,2) AS "학번",  STUDENT_NAME AS "이름"
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO,1,1) != 'A';

-- 2000년도 이전에 입학한 학생들 조회
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE ENTRANCE_DATE < '2000/01/01';

-- 9
SELECT ROUND(AVG(POINT),1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

-- 10
SELECT  DEPARTMENT_NO AS "학과번호", COUNT(*) AS "학생수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

-- 11
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

-- 12
SELECT SUBSTR(TERM_NO,1,4) AS "년도", ROUND(POINT,1) AS "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';
--학기 별 평점
/*
SELECT SUBSTR(TERM_NO, 1, 4) 년도, ROUND(AVG(POINT), 1) "년도 별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
ORDER BY 1;
*/

-- 13
SELECT DEPARTMENT_NO AS "학과코드명", COUNT(*) AS "휴학생 수"
FROM (SELECT DEPARTMENT_NO, ABSENCE_YN
      FROM TB_STUDENT
      WHERE ABSENCE_YN ='Y')
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;
--인바이트절을 사용해서 학과 별 휴학생 수를 조회

SELECT DEPARTMENT_NO 학과코드명, COUNT(DECODE(ABSENCE_YN, 'Y', 1)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;
--DECODE를 사용해서 휴학생을 조회

-- 14
SELECT STUDENT_NAME AS "동일이름", COUNT(*) AS "동명인 수"
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) >1;

-- 15
SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", SUBSTR(TERM_NO, 5, 2) AS "학기", ROUND(POINT,1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

SELECT SUBSTR(TERM_NO, 1, 4) AS "년도", ROUND(AVG(POINT),1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4);

SELECT ROUND(AVG(POINT),1) AS "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

/*
SELECT SUBSTR(TERM_NO, 1, 4) 년도, SUBSTR(TERM_NO, 5, 2) 학기, ROUND(AVG(POINT), 1) 평균
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2))
ORDER BY 1; 
*/
--ROLLUP(?) : 데이터를 그룹화하여 집계하는데 사용
-- [표현법]
-- 1. GROUP BY ROLLUP (그룹칼럼)
-- 2. GROUP BY 그룹칼럼 WITH ROLLUP